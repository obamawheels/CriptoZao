// src/constants.ts
var SDK_URL = "https://embedded-wallet.phantom.app/sdk.js";
var PHANTOM_INITIALIZED_EVENT_NAME = "phantom#embedded#initialized";

// src/index.ts
var Position = /* @__PURE__ */ ((Position2) => {
  Position2["bottomRight"] = "bottom-right";
  Position2["bottomLeft"] = "bottom-left";
  Position2["topRight"] = "top-right";
  Position2["topLeft"] = "top-left";
  return Position2;
})(Position || {});
async function createPhantom(config = {}) {
  const container = document.head ?? document.documentElement;
  const scriptTag = document.createElement("script");
  const sdkURL = new URL(config.sdkURL ?? SDK_URL);
  if ("zIndex" in config && config.zIndex != null) {
    sdkURL.searchParams.append("zIndex", config.zIndex.toString());
  }
  if ("hideLauncherBeforeOnboarded" in config && config.hideLauncherBeforeOnboarded != null) {
    sdkURL.searchParams.append(
      "hideLauncherBeforeOnboarded",
      config.hideLauncherBeforeOnboarded.toString()
    );
  }
  if ("colorScheme" in config && config.colorScheme != null) {
    sdkURL.searchParams.append("colorScheme", config.colorScheme.toString());
  }
  if ("paddingBottom" in config && config.paddingBottom != null) {
    sdkURL.searchParams.append(
      "paddingBottom",
      config.paddingBottom.toString()
    );
  }
  if ("paddingRight" in config && config.paddingRight != null) {
    sdkURL.searchParams.append("paddingRight", config.paddingRight.toString());
  }
  if ("paddingTop" in config && config.paddingTop != null) {
    sdkURL.searchParams.append("paddingTop", config.paddingTop.toString());
  }
  if ("paddingLeft" in config && config.paddingLeft != null) {
    sdkURL.searchParams.append("paddingLeft", config.paddingLeft.toString());
  }
  if ("position" in config && config.position != null) {
    sdkURL.searchParams.append("position", config.position.toString());
  }
  if ("element" in config && config.element != null) {
    sdkURL.searchParams.append("element", config.element.toString());
  }
  let namespace = "phantom";
  if ("namespace" in config && config.namespace != null) {
    namespace = config.namespace;
    sdkURL.searchParams.append("namespace", namespace);
  }
  sdkURL.searchParams.append("ts", Date.now().toString());
  scriptTag.setAttribute("type", "module");
  scriptTag.setAttribute("src", sdkURL.toString());
  container.insertBefore(scriptTag, container.children[0]);
  container.removeChild(scriptTag);
  return await new Promise((resolve, _reject) => {
    window.addEventListener(
      PHANTOM_INITIALIZED_EVENT_NAME,
      function handleInit() {
        const phantomInstance = window[namespace];
        resolve({
          navigate: ({ route, params }) => {
            phantomInstance.app.navigate({ route, params });
          },
          hide: () => {
            const iframe = document.getElementById(`${namespace}-wallet`);
            if (iframe != null)
              iframe.style.display = "none";
          },
          show: () => {
            const iframe = document.getElementById(`${namespace}-wallet`);
            if (iframe != null)
              iframe.style.display = "block";
          },
          swap: (options) => {
            phantomInstance.app.swap({
              buy: options.buy,
              sell: options.sell,
              amount: options.amount
            });
          },
          buy: (options) => {
            phantomInstance.app.buy({
              buy: options.buy,
              amount: options.amount
            });
          },
          solana: phantomInstance.solana,
          ethereum: phantomInstance.ethereum,
          sui: phantomInstance.sui,
          bitcoin: phantomInstance.bitcoin,
          app: phantomInstance.app
        });
        window.removeEventListener(PHANTOM_INITIALIZED_EVENT_NAME, handleInit);
      }
    );
  });
}
export {
  Position,
  createPhantom
};
